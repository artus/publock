import NodeRSA = require('node-rsa');
import SHA256 = require('crypto-js/sha256');

/**
* A message object represents an entry for a MessageChain.
*/
export class Message
{
    pseudonym : string;
    body : string;
    date : string;
    reference : string;
    previousHash : string;
    publicKey : string;
    encryptedHash : string;
    hash : string;
    
    /**
    * Initialise a new Message.
    *
    * @param {string} pseudonym - The pseudonym to be used for this message.
    * @param {string} body - The message body.
    * @param {string} date - The datestring for this message.
    * @param {string} reference - The hash of the message referenced by this message.
    * @param {string} previousHash - The hash of the newest entry of the MessageChain.
    * @param {string} publicKey - The public key associated with this pseudonym.
    * @param {string} encryptedHash - The hash of all the above fields, encrypted with the private key corresponding to the given public key.
    * @param {string} hash - The hash of this message, hashed from all the above fields.
    */
    constructor(pseudonym : string = "", body : string = "", date : string = "", reference : string = "", previousHash : string = "", publicKey : string = "", encryptedHash : string = "", hash : string = "")
    {
        this.pseudonym = pseudonym;
        this.body = body;
        this.date = date;
        this.reference = reference;
        this.previousHash = previousHash;
        this.publicKey = publicKey;
        this.encryptedHash = encryptedHash;
        this.hash = hash;
    }
    
    /**
    * Concatenate all the fields that are required for generating the inner hash. (e.g. The hash that will be encrypted)
    *
    * @returns {string} The result of the concatenation of all the fields required for generating the inner hash.
    */
    get encryptedHashFields() : string
    {
        return this.pseudonym + this.body + this.date + this.reference + this.previousHash + this.publicKey;
    }
    
    /**
    * Generate the inner hash using the string generated by the 'encryptedHash' function.
    *
    * @returns {string} A SHA256 hash generated from the string provided by the 'encryptedHash' function.
    */
    get innerHash() : string
    {
        return SHA256(this.encryptedHashFields).toString();
    }
    
    /**
    * Concatenate all the fields of this message, except for the hash field.
    *
    * @returns {string} The result of the concatenation of all the fields required for generating the hash.
    */
    get allFields() : string
    {
        return this.pseudonym + this.body + this.date + this.reference + this.previousHash + this.publicKey + this.encryptedHash;
    }
    
    /**
    * Generate the encrypted hash for this message using the private key that belongs to the public key of this message.
    *
    * @param {string} privateKey - The private key that belongs to the public key of this message.
    * @returns {string} The encrypted inner hash of this message.
    */
    generateEncryptedHash(privateKey : string) : string
    {
        let key = new NodeRSA({b: 512});
        key.importKey(privateKey, 'private');
            
        let hash = this.innerHash;
        let encryptedHash = key.encryptPrivate(hash, 'base64');
        
        return encryptedHash;
    }
    
    equals(otherMessage : Message) : boolean
    {
        if (this.pseudonym != otherMessage.pseudonym) return false;
        if (this.body != otherMessage.body) return false;
        if (this.date != otherMessage.date) return false;
        if (this.reference != otherMessage.reference) return false;
        if (this.previousHash != otherMessage.previousHash) return false;
        if (this.publicKey != otherMessage.publicKey) return false;
        if (this.encryptedHash != otherMessage.encryptedHash) return false;
        if (this.hash != otherMessage.hash) return false;
        
        return true;
    }
    
    /**
    * Generate the hash of this message using the string generated by the 'allFields' function.
    *
    * @returns {string} A SHA256 hash generated from the string provided by the 'allFields' function.
    */
    generateHash() : string
    {
        return SHA256(this.allFields).toString();
    }
    
    static copyMessage(message : Message) : Message
    {
        return new Message(message.pseudonym, message.body, message.date, message.reference, message.previousHash, message.publicKey, message.encryptedHash, message.hash);
    }
}